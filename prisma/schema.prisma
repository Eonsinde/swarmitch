// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  imageUrl String
  clerkUserId String @unique
  bio String?

  following Follow[] @relation("Following")
  followingBy Follow[] @relation("FollowingBy")

  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  thumbnailUrl String?

  ingressId String? @unique
  serverUrl String?
  streamKey String?

  isLive Boolean @default(false)
  isChatEnabled Boolean @default(false)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  followerId String @db.ObjectId
  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String @db.ObjectId
  following User @relation(name: "FollowingBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  blockerId String @db.ObjectId
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedId String @db.ObjectId
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}